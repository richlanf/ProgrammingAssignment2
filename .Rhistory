pwr.t.test(d=0.5, sig.level=0.05, power=.8, type=c("two.sample"))
pwr.t.test(d=0.5, sig.level=0.05, power=.8, type=c("paired"))
library("pwr")
pwr
library("pwr")
pwr.t.test (n=20, d=0.3, sig.level=0.05, type=c("paired"))
pwr.t.test (power=0.8, d=0.3, sig.level=0.05, type=c("paired"))
pwr.t.test (power=0.8, d=0.4, sig.level=0.05, type=c("paired"))
pwr.t.test (n=20, d=0.4, sig.level=0.05, type=c("paired"))
install.packages("slidify")
library(devtools)
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("mydeck")
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ggplot2)
search()
library("slidify", lib.loc="~/R/win-library/3.1")
search()
find.package("devtools")
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
m<-NULL
m
set <- function(y) {
x <<- y
m <<- NULL
}
set
get <- function() x
get
setinverse <- function(solve) m <<- solve
?solve
bla<-c(1,2;3,4)
bla<-c(1:4,2,2)
bla
bla<-vector(1:4,2,2)
?vector
?matrix
bla<-matrix(1:4,2,2)
bla
solve(bla)
solve(BLA)
solve(bla)
bla2<.solve(bla)
bla2<-solve(bla)
bla2
bla3<-solve(bla2)
bla3
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x<-bla
x
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x<-matrix(1:4,2,2)
cacheSolve(x)
cachematrix(x)
makeCacheMatrix(x)
x
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
#setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
#getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x<-matrix(1:4,2,2)
x
cacheSolve(x)
makeCacheMatrix(x)
x
m
?environment
environment(cacheSolve)
environment(makeCacheMatrix)
set
makeCacheMatrix(x)
x<-matrix(1:4,2,2)
x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
#setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
#getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(x)
m
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean(x)
makeVector(x)
cachemean(x)
x
x<-vector(1:4)
x<-vector(4)
?vector
x<-c(1:4)
x
makeVector(x)
cachemean(x)
bla<-matrix(1:4,2,2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
#setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
#getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
bla<-c(1:4)
cachemean(bla)
makeVector(bla)
cachemean(bla)
bla2<-matrix(1:4,2,2)
bla2
cacheSolve(bla2)
get
set
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
cachematrix <- function (x){
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
#setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
#getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
}
bla<-matrix(1:4,2,2)
bla
cachematrix(bla)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
cachematrix <- function (x){
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
#setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
#getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
m
}
cachematrix(bla)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
bla <- makeVector(1:100)
bla
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bla<-makeVector(1:100)
bla
cachemean(bla)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
#setmean <- function(mean) m <<- mean
setinverse <- function(solve) m <<- solve
#getmean <- function() m
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeMatrix
?makeMatrix
source("cachematrix.R")
source("cachematrix.R")
getwd()
setwd("C:/Users//richlan/Documents/GitHub/ProgrammingAssignment2/")
getwd()
source("cachematrix.R")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
